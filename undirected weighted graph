#include <stdio.h>
#include <limits.h>
#include <stdbool.h>
#include<math.h>
#define MAX_NODES 100
#define MAX_EDGES 1000
typedef struct {
    int node;
    double prob;
} Edge;
double maxProb[MAX_NODES];
bool visited[MAX_NODES];
void dfs(int node, int n, Edge edges[], double succProb[], int start, int end, double currProb) {
    if (node == end) {
        maxProb[end] = fmax(maxProb[end], currProb);
        return;
    }
    visited[node] = true;
    for (int i = 0; i < n; i++) {
        if (edges[i].node == node && !visited[edges[i].node]) {
            dfs(edges[i].node, n, edges, succProb, start, end, currProb * succProb[i]);
        }
    }
    visited[node] = false;
}
double maxProbability(int n, int edges[][2], double succProb[], int start, int end) {
    Edge graph[MAX_EDGES];
    for (int i = 0; i < n; i++) {
        graph[i].node = edges[i][1];
        graph[i].prob = succProb[i];
        graph[n + i].node = edges[i][0];
        graph[n + i].prob = succProb[i];
    }
    for (int i = 0; i < MAX_NODES; i++) {
        maxProb[i] = 0.0;
        visited[i] = false;
    }
    dfs(start, 2 * n, graph, succProb, start, end, 1.0);
    return maxProb[end];
}
int main() {
    int n = 3;
    int edges[][2] = {{0,1},{1,2},{0,2}};
    double succProb[] = {0.5,0.5,0.2};
    int start = 0;
    int end = 2;
    printf("Output: %f\n", maxProbability(n, edges, succProb, start, end));
    n = 3;
    int edges2[][2] = {{0,1},{1,2},{0,2}};
    double succProb2[] = {0.5,0.5,0.3};
    start = 0;
    end = 2;
    printf("Output: %f\n", maxProbability(n, edges2, succProb2, start, end));
    return 0;
}
OUTPUT:
0.250000
0.300000
