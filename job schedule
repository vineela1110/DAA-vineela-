#include <stdio.h>
#include <stdlib.h>
#include<math.h>
#define MAX_JOBS 100
typedef struct {
    int startTime;
    int endTime;
    int profit;
} Job;
int compare(const void *a, const void *b) {
    Job *job1 = (Job *)a;
    Job *job2 = (Job *)b;
    return job1->endTime - job2->endTime;
}
int maxProfit(int startTime[], int endTime[], int profit[], int n) {
    Job jobs[MAX_JOBS];
    for (int i = 0; i < n; i++) {
        jobs[i].startTime = startTime[i];
        jobs[i].endTime = endTime[i];
        jobs[i].profit = profit[i];
    }
    qsort(jobs, n, sizeof(Job), compare);
    int dp[MAX_JOBS];
    dp[0] = jobs[0].profit;
    for (int i = 1; i < n; i++) {
        dp[i] = jobs[i].profit;
        for (int j = 0; j < i; j++) {
            if (jobs[i].startTime >= jobs[j].endTime) {
                dp[i] = fmax(dp[i], dp[j] + jobs[i].profit);
            }
        }
    }
    int max_profit = 0;
    for (int i = 0; i < n; i++) {
        max_profit = fmax(max_profit, dp[i]);
    }
    return max_profit;
}
int main() {
    int startTime1[] = {1,2,3,3};
    int endTime1[] = {3,4,5,6};
    int profit1[] = {50,10,40,70};
    int n1 = sizeof(startTime1) / sizeof(startTime1[0]);
    printf("Output: %d\n", maxProfit(startTime1, endTime1, profit1, n1));
    int startTime2[] = {1,2,3,4,6};
    int endTime2[] = {3,5,10,6,9};
    int profit2[] = {20,20,100,70,60};
    int n2 = sizeof(startTime2) / sizeof(startTime2[0]);
    printf("Output: %d\n", maxProfit(startTime2, endTime2, profit2, n2));
    return 0;
}
OUTPUT:
120
150
