#include <stdio.h>
#include <string.h>
#include<stdlib.h>
char* longest_palindromic_substring(char* s) {
    int n = strlen(s);
    int start = 0, max_len = 1;
    for (int i = 0; i < n; i++) {
        int len1 = expand_around_center(s, i, i);
        int len2 = expand_around_center(s, i, i + 1);
        int len = len1 > len2? len1 : len2;
        if (len > max_len) {
            start = i - (len - 1) / 2;
            max_len = len;
        }
    }
    char* res = (char*)malloc((max_len + 1) * sizeof(char));
    strncpy(res, s + start, max_len);
    res[max_len] = '\0';
    return res;
}
int expand_around_center(char* s, int left, int right) {
    int n = strlen(s);
    while (left >= 0 && right < n && s[left] == s[right]) {
        left--;
        right++;
    }
    return right - left - 1;
}
int main() {
    char s1[] = "babad";
    char s2[] = "cbbd";
    char* res1 = longest_palindromic_substring(s1);
    char* res2 = longest_palindromic_substring(s2);
    printf("Longest palindromic substring in \"%s\": %s\n", s1, res1);
    printf("Longest palindromic substring in \"%s\": %s\n", s2, res2);
    free(res1);
    free(res2);
    return 0;
}
OUTPUT:
Longest palindromic substring in "babad": bab
Longest palindromic substring in "cbbd": bb
