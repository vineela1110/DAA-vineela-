#include <stdio.h>
#define INF 99999
void floydWarshall(int graph[][5], int n) {
    int i, j, k;
    for (k = 0; k < n; k++) {
        for (i = 0; i < n; i++) {
            for (j = 0; j < n; j++) {
                if (graph[i][k] + graph[k][j] < graph[i][j])
                    graph[i][j] = graph[i][k] + graph[k][j];
            }
        }
    }
}
void printGraph(int graph[][5], int n) {
    int i, j;
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            if (graph[i][j] == INF)
                printf("INF ");
            else
                printf("%d ", graph[i][j]);
        }
        printf("\n");
    }
}
int main() {
    int n = 5;
    int graph[5][5] = {
        {0, 2, INF, INF, 8},
        {2, 0, 3, INF, 2},
        {INF, 3, 0, 1, INF},
        {INF, INF, 1, 0, 1},
        {8, 2, INF, 1, 0}
    };
    printf("Distance matrix before applying Floyd's Algorithm:\n");
    printGraph(graph, n);
    floydWarshall(graph, n);
    printf("Distance matrix after applying Floyd's Algorithm:\n");
    printGraph(graph, n);
    int source = 2; // C
    int destination = 0; // A
    printf("Shortest path from C to A: %d\n", graph[source][destination]);
    return 0;
}
OUTPUT:
Distance matrix before applying Floyd's Algorithm:
0 2 INF INF 8 
2 0 3 INF 2 
INF 3 0 1 INF 
INF INF 1 0 1 
8 2 INF 1 0 
Distance matrix after applying Floyd's Algorithm:
0 2 5 5 4 
2 0 3 3 2 
5 3 0 1 2 
5 3 1 0 1 
4 2 2 1 0 
Shortest path from C to A: 5
