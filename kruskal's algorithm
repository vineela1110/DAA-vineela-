#include <stdio.h>
#include <stdlib.h>
struct Edge {
    int src, dest, weight;
};
struct Subset {
    int parent;
    int rank;
};
int compareEdges(const void* a, const void* b) {
    return ((struct Edge*)a)->weight - ((struct Edge*)b)->weight;
}
int find(struct Subset subsets[], int i) {
    if (subsets[i].parent != i)
        subsets[i].parent = find(subsets, subsets[i].parent);
    return subsets[i].parent;
}
void unionSets(struct Subset subsets[], int x, int y) {
    int xroot = find(subsets, x);
    int yroot = find(subsets, y);
    if (subsets[xroot].rank < subsets[yroot].rank)
        subsets[xroot].parent = yroot;
    else if (subsets[xroot].rank > subsets[yroot].rank)
        subsets[yroot].parent = xroot;
    else {
        subsets[yroot].parent = xroot;
        subsets[xroot].rank++;
    }
}
void kruskalMST(int n, int m, struct Edge edges[]) {
    struct Edge result[n];
    int e = 0;
    int i = 0;
    qsort(edges, m, sizeof(edges[0]), compareEdges);
    struct Subset subsets[n];
    for (int v = 0; v < n; v++) {
        subsets[v].parent = v;
        subsets[v].rank = 0;
    }
    while (e < n - 1 && i < m) {
        struct Edge nextEdge = edges[i++];
        int x = find(subsets, nextEdge.src);
        int y = find(subsets, nextEdge.dest);
        if (x != y) {
            result[e++] = nextEdge;
            unionSets(subsets, x, y);
        }
    }
    printf("Edges in MST: ");
    int totalWeight = 0;
    for (i = 0; i < e; i++) {
        printf("(%d, %d, %d) ", result[i].src, result[i].dest, result[i].weight);
        totalWeight += result[i].weight;
    }
    printf("\nTotal weight of MST: %d\n", totalWeight);
}
int main() {
    int n = 4;
    int m = 5;
    struct Edge edges[] = { {0, 1, 10}, {0, 2, 6}, {0, 3, 5}, {1, 3, 15}, {2, 3, 4} };
    kruskalMST(n, m, edges);
    return 0;
}
OUTPUT:
Edges in MST: (2, 3, 4) (0, 3, 5) (0, 1, 10) 
Total weight of MST: 19
