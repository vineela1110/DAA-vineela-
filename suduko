def is_valid(board, row, col, num):
    for x in range(9):
        if board[row][x] == num:
            return False
    for x in range(9):
        if board[x][col] == num:
            return False
    start_row = row - row % 3
    start_col = col - col % 3
    for i in range(3):
        for j in range(3):
            if board[i + start_row][j + start_col] == num:
                return False
    return True
def solve_sudoku(board):
    for i in range(9):
        for j in range(9):
            if board[i][j] == ".":
                for num in range(1, 10):
                    if is_valid(board, i, j, str(num)):
                        board[i][j] = str(num)
                        if solve_sudoku(board):
                            return True
                        board[i][j] = "."
                return False
    return True
def print_board(board):
    for i in range(9):
        if i % 3 == 0 and i!= 0:
            print("- - - - - - - - - - - -")
        for j in range(9):
            if j % 3 == 0 and j!= 0:
                print(" | ", end="")
            if j == 8:
                print(board[i][j])
            else:
                print(str(board[i][j]) + " ", end="")
board = [
    ["5","3",".",".","7",".",".",".","."],
    ["6",".",".","1","9","5",".",".","."],
    [".","9","8",".",".",".",".","6","."],
    ["8",".",".",".","6",".",".",".","3"],
    ["4",".",".","8",".","3",".",".","1"],
    ["7",".",".",".","2",".",".",".","6"],
    [".","6",".",".",".",".","2","8","."],
    [".",".",".","4","1","9",".",".","5"],
    [".",".",".",".","8",".",".","7","9"]
]
if solve_sudoku(board):
    print_board(board)
else:
    print("No solution exists")
