#include <stdio.h>
#include <stdlib.h>
#include<limits.h>
#define MAX_WORKERS 10
#define MAX_TASKS 10
typedef struct {
    int worker, task;
} Assignment;
int total_cost(Assignment assignment[], int cost_matrix[][MAX_TASKS], int n) {
    int total = 0;
    for (int i = 0; i < n; i++) {
        total += cost_matrix[assignment[i].worker][assignment[i].task];
    }
    return total;
}
void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}
void permute(int workers[], int start, int end, Assignment* assignments, int cost_matrix[][MAX_TASKS], int n, int* min_cost, Assignment* optimal_assignment) {
    if (start == end) {
        for (int i = 0; i < n; i++) {
            assignments[i].worker = i;
            assignments[i].task = workers[i];
        }
        int cost = total_cost(assignments, cost_matrix, n);
        if (*min_cost > cost) {
            *min_cost = cost;
            for (int i = 0; i < n; i++) {
                optimal_assignment[i] = assignments[i];
            }
        }
    } else {
        for (int i = start; i < end; i++) {
            swap(&workers[start], &workers[i]);
            permute(workers, start + 1, end, assignments, cost_matrix, n, min_cost, optimal_assignment);
            swap(&workers[start], &workers[i]); // backtrack
        }
    }
}
void assignment_problem(int cost_matrix[][MAX_TASKS], int n) {
    Assignment assignments[n];
    int workers[n];
    for (int i = 0; i < n; i++) {
        workers[i] = i;
    }
    int min_cost = INT_MAX;
    Assignment optimal_assignment[n];
    permute(workers, 0, n, assignments, cost_matrix, n, &min_cost, optimal_assignment);
    printf("Optimal Assignment: ");
    for (int i = 0; i < n; i++) {
        printf("(%d, %d) ", optimal_assignment[i].worker + 1, optimal_assignment[i].task + 1);
    }
    printf("\n");
    printf("Total Cost: %d\n", min_cost);
}
int main() {
    int cost_matrix1[][MAX_TASKS] = {{3, 10, 7}, {8, 5, 12}, {4, 6, 9}};
    int cost_matrix2[][MAX_TASKS] = {{15, 9, 4}, {8, 7, 18}, {6, 12, 11}};
    printf("Test Case 1:\n");
    assignment_problem(cost_matrix1, 3);
    printf("Test Case 2:\n");
    assignment_problem(cost_matrix2, 3);
    return 0;
}
OUTPUT:
Test Case 1:
Optimal Assignment: (1, 3) (2, 2) (3, 1) 
Total Cost: 16
Test Case 2:
Optimal Assignment: (1, 3) (2, 2) (3, 1) 
Total Cost: 17
